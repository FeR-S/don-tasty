<?php

namespace common\models;

use common\models\Article;
use Yii;
use yii\base\Model;
use yii\data\ActiveDataProvider;

/**
 * ArticleSearch represents the model behind the search form about `common\models\Article`.
 */
class ArticleSearch extends Article
{

    const SCENARIO_PUBLIC_SEARCH = 'public_search';

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title'], 'required', 'on' => self::SCENARIO_PUBLIC_SEARCH],
            [['title'], 'string', 'min' => 3, 'on' => self::SCENARIO_PUBLIC_SEARCH],
            [['id', 'user_id', 'category_id', 'rating', 'views', 'status'], 'integer'],
            [['title', 'body', 'created_at', 'updated_at', 'source', 'slug'], 'safe'],
        ];
    }

    /**
     * @return array
     */
    public function behaviors()
    {
        return parent::behaviors(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function scenarios()
    {
        $scenarios = parent::scenarios();
        $scenarios[self::SCENARIO_PUBLIC_SEARCH] = ['title'];
        return $scenarios;
    }

    /**
     * @param $params
     * @param bool $public
     * @return ActiveDataProvider
     */
    public function search($params, $public = false)
    {
        $query = Article::find();

        if ($public) {
            $query->where(['status' => Article::STATUS_PUBLIC]);
        }

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
        ]);

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        // grid filtering conditions
        $query->andFilterWhere([
            'id' => $this->id,
            'user_id' => $this->user_id,
            'category_id' => $this->category_id,
//            'created_at' => $this->created_at,
//            'updated_at' => $this->updated_at,
//            'rating' => $this->rating,
//            'views' => $this->views,
            'status' => $this->status,
        ]);

        $query->andFilterWhere(['like', 'title', $this->title])
            ->andFilterWhere(['like', 'body', $this->body])
            ->andFilterWhere(['like', 'source', $this->source]);

        return $dataProvider;
    }

    /**
     * @return ActiveDataProvider
     */
    public function searchInstant()
    {
        $query = Article::find()
//            ->select(['articles.id', 'articles.title', 'articles.status', 'articles.created_at', 'categories.title'])
            ->joinWith('category')
            ->where([
                'articles.status' => Article::STATUS_PUBLIC
            ])->groupBy(['articles.id']);

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
        ]);

//        $this->title = self::mb_ucfirst(mb_strtolower($this->title));
        $query->andFilterWhere(['like', 'LOWER(articles.title)', mb_strtolower($this->title)]);

        return $dataProvider;
    }

    /**
     * @param $params
     * @return ActiveDataProvider
     */
    public function moderationSearch($params)
    {
        $query = Article::find()->where([
            '!=', 'status', Article::STATUS_QUESTION
        ]);

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
        ]);

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        // grid filtering conditions
        $query->andFilterWhere([
            'id' => $this->id,
            'user_id' => $this->user_id,
            'category_id' => $this->category_id,
//            'created_at' => $this->created_at,
//            'updated_at' => $this->updated_at,
//            'rating' => $this->rating,
//            'views' => $this->views,
            'status' => $this->status,
        ]);

        $query->andFilterWhere(['like', 'title', $this->title])
            ->andFilterWhere(['like', 'body', $this->body])
            ->andFilterWhere(['like', 'source', $this->source]);

        return $dataProvider;
    }

    /**
     * @param $params
     * @return ActiveDataProvider
     */
    public function questionsSearch($params)
    {
        $query = Article::find()->where([
            'status' => Article::STATUS_QUESTION
        ]);

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
        ]);

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        $query->andFilterWhere(['like', 'title', $this->title])
            ->andFilterWhere(['like', 'body', $this->body]);

        return $dataProvider;
    }
}
